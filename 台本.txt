チームSNHの成果発表をはじめます。

（クリック）

まずは、単独走行用のAIについて話します。

（クリック）

用いた戦略は、取り逃し処理、取る直前にハンドルを切る、ブレーキのタイイングを数学的に算出する、２点間の直線に入る、です。

（クリック）

まず、取り逃し処理ですが、これはハタを取り逃したと判断したら、ハタと逆にハンドルを切って、
取り逃しを回避します。

口頭ではどういう動きをするのか伝わらないと思うので、アニメーションを用いて挙動を説明します。

（クリック）

ここで、取り逃したと判断されます。

（クリック）

そうすると、ハタと逆方向にハンドルをきって、大きく膨らむような軌跡を描きながら
次のハタを取りに行きます。

（クリック）

次は、取る直前にハンドルを切る、という処理です。これはハタを取る直前につぎの次のハタに向かってハンドルを切っているだけです。

（クリック）
ブレーキのタイミングを数学的に算出する、ですが、これはタイトルだけでは意味が全くわからないと思います。

効率よくハタを取るためには、次のハタへ闇雲に突っ込むのではなく、次の次のハタへ向かいやすいようにブレーキをかける必要があります。

このブレーキをかけるタイミングを、どのようにしたら算出できるのかを考えました。

例として、スピードを10から6にしたいときはどのように導いているのか、を説明します。

（クリック）

まず、このグラフは車の速度と距離の関係をプロットしたものになります。
今、スピードが10なので、その時のx軸を読みます。
次に、スピードを10から6に減速したいので、スピードが6の時のx軸を読みます。
必要な距離というのは、スピードが10の時の距離 - スピードが6の時の距離、つまり
150 - 50 で 100だということがわかります。

（クリック）

この考え方を用いて、私達はブレーキをかけるタイミングを算出しています。

（クリック）

最後に、２点間の直線上に入る、についてです。

（クリック）

これは次の旗と次に次の旗の距離が近い時に２つの旗を通る直線上を車が走る、という処理です。
こうすることで、少し遠回りになりますが、スピードを落とすことなく、２つの旗を連続で取ることができるため、時間を短縮できると考えました。
こちらも、アニメーションを用いて挙動を説明します。

（クリック）

このように入るよりも、

（クリック）

このように入った方がより速く旗をとれるということです。

（クリック）

次に、この処理をどのように実装したかを説明します。

（クリック）

まず始めに、目標点の座標を算出します。

（クリック）

図のように、目標点とは２つの旗を通る直線上の点で、次の旗から少し離れた点のことです。

（クリック）

目標点の座標は、次の旗と次の次の旗を通る直線の式と、次の旗と目標点との２点間の距離の式を連立方程式と解の公式を用いてX座標を算出し、その値を①式に代入してY座標を算出しました。	

（クリック）

次に、目標点に到達したら次の旗へ向かう処理に切り替えます。

（クリック）

そうして、２点を通る直線上に乗せた上で、次の旗を取る、という仕組みです。

（クリック）

次に、実験方法についてですが、私たちは、Runで動作を確認、Statsでスコアを確認の２つしかしていません。

（クリック）

実験結果として、Runで動作を確認したときに、ブレーキが思ったようにかからないということが分かりました。

（クリック）

考察としては、先ほど説明したブレーキのタイミングを数学的に算出する式にミスがあるのではないかと考え、３週間ほど考えましたが、原因は分かりませんでした。
なので、算出した値に色々な数字をかけたりして値を補正し、最も良い結果が出たものを採用することにしました。

（クリック）

次に、対戦走行用のAIについて話します。

（クリック）

用いた戦略は、次のはたを戦略的に諦める、相手が旗を取れない時は自分が行く、時間が残り少なくなったら突っ込む、です。

（クリック）

まず、次のはたを戦略的に諦める、ですが、これは距離的に相手が自分より次の旗に近い時、次の旗は相手に任せて、自分はつぎのつぎの旗を狙いにいくという処理です。

（クリック）

次に、相手が旗を取れない時は自分が行く、です。
これは、次の旗が表示されてからのフレーム数をカウントしておき、相手の方が次の旗に近いにもかかわらず、120フレーム待っても、相手が旗を取らない時、相手が何らかの原因で旗を取ることができないと判断し、自分がその旗を取りに行くという処理です。

（クリック）

最後に、時間が残り少なくなったら突っ込むという処理です。
これは、１試合のフレーム数をカウントし、残りが50フレーム以下になった時、他の処理を無視して次の旗を取りに行きます。
こうすることで、１つでも多く旗を取ることができると思い、実装しました。

（クリック）

次に、対戦走行用のAIの実験内容について説明します。

（クリック）

実験方法についてですが、私たちは、対戦走行用vs単独走行用、対戦走行用vs対戦走行用の２つを行いました。

（クリック）

実験結果としては、対戦走行用vs単独走行用では、対戦走行用が圧勝でした。

（クリック）

また、対戦走行用vs対戦走行用では、お互いが協力するような形で、旗を次々に取ることができていたので、うまく調和が取れていました。

（クリック）

考察としては、対戦走行用vs対戦走行用で、うまく調和が取れていたので戦略としては正しいことが分かりました。
また、全体を通して、最高スピードが低く、もっと加速しても良さそうだと感じました。

（クリック）

最後に、課題として上げられるのは、数学的に導入した部分、特にブレーキのタイミングを数学的に算出したところが不完全でした。この部分を上手く実装できていれば、今よりも良い結果になったのではないかとおもいます。

（クリック）

以上で、チームSNHの成果発表を終わります。
ありがとうございました！！！












